# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://influxdb:8086"]

  ## Token for authentication.
  token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" 

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "$DOCKER_INFLUXDB_INIT_ORG"

  ## Destination bucket to write into.
  bucket = "$DOCKER_INFLUXDB_INIT_BUCKET"

# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
  servers = ["tcp://mqttbroker:1883"]

  ## Topics that will be subscribed to.
  topics = [
    "device/+/sensor/+",
  ]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json_v2" 

  ## Configure MQTT topic parsing to extract and assign tags 
    ## for each desired segment of the topic. Ignore segments by adding "_".
    ## This enhances queryability, especially when dealing with topics that use wildcards.
    ## The result is improved data categorization within InfluxDB based on the assigned tags.
  [[inputs.mqtt_consumer.topic_parsing]]
      topic = "device/+/sensor/+"
      tags = "_/device_serial/_/sensor_serial"
  # Payload parsing    
  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "sensor_data"
    [[inputs.mqtt_consumer.json_v2.object]]
        path = "@this"
        disable_prepend_keys = true
      [[inputs.mqtt_consumer.json_v2.object.tag]]
        path = "unit"
      [[inputs.mqtt_consumer.json_v2.object.field]]
        path = "data"


[[inputs.mqtt_consumer]]
  servers = ["tcp://mqttbroker:1883"]

  ## Topics that will be subscribed to.
  topics = [
    "device/+/status"
  ]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json_v2" 

  ## Configure MQTT topic parsing to extract and assign tags 
    ## for each desired segment of the topic. Ignore segments by adding "_".
    ## This enhances queryability, especially when dealing with topics that use wildcards.
    ## The result is improved data categorization within InfluxDB based on the assigned tags.
  [[inputs.mqtt_consumer.topic_parsing]]
          topic = "device/+/status"
          tags = "_/device_serial/_"

  # Payload parsing    
  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "device_status"
    [[inputs.mqtt_consumer.json_v2.object]]
        path = "@this"
        disable_prepend_keys = true
      [[inputs.mqtt_consumer.json_v2.object.field]]
        path = "status"


[[inputs.mqtt_consumer]]
  servers = ["tcp://mqttbroker:1883"]

  ## Topics that will be subscribed to.
  topics = [
    "device/+/sensor/+/command"
  ]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  name_override = "device_commands"
  value_field_name = "command"

  data_format = "value"
  data_type = "string" 

  ## Configure MQTT topic parsing to extract and assign tags 
    ## for each desired segment of the topic. Ignore segments by adding "_".
    ## This enhances queryability, especially when dealing with topics that use wildcards.
    ## The result is improved data categorization within InfluxDB based on the assigned tags.
  [[inputs.mqtt_consumer.topic_parsing]]
          topic = "device/+/sensor/+/command"
          tags = "_/device_serial/_/sensor_serial/_"
